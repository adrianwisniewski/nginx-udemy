user www-data;

worker_processes auto;

events {
  worker_connections 1024;
}

http {

  include mime.types;

  # Configure microcache (fastcgi)
  #/tmp will be emptied while booting
  #levels=1:2 parameter specifies the subdiretory structure of the cache. In this case two levels
  #keys_zone name of defined below cache, ale the size of the ZONE
  #inactive - parameter sets the time after which cached content will be removed from cache
  fastcgi_cache_path /tmp/nginx_cache levels=1:2 keys_zone=ZONE_1:100m inactive=60m;
  #typical cache entry will be identyficated as. scheme could be https, request_method could be GET/POST
  #that's default format, is also cached by md5. How is cached is described in  fastcgi_cache_path.
  fastcgi_cache_key "$scheme$request_method$host$request_uri";

  #allows us to verify if the GET request was served with cache
  add_header X-Cache $upstream_cache_status;

  server {

    listen 80;
    server_name 167.99.93.26;

    root /sites/demo;

    index index.php index.html;

    # Cache by default. $no_cache is variable which is set up to false(0)
    set $no_cache 0;

    # Check for cache bypass
    if ($arg_skipcache = 1) {
      set $no_cache 1;
    }

    location / {
      try_files $uri $uri/ =404;
    }

    location ~\.php$ {
      # Pass php requests to the php-fpm service (fastcgi)
      include fastcgi.conf;
      fastcgi_pass unix:/run/php/php7.1-fpm.sock;

      # Enable cache(name from  fastcgi_cache_path)
      fastcgi_cache ZONE_1;
      #which codes are valid for how many time
      fastcgi_cache_valid 200 60m;
      #to use that fuction write "curl -I http:/$IP/?skipcache=1", which will trigger a bypass
      fastcgi_cache_bypass $no_cache;
      fastcgi_no_cache $no_cache;
    }

  }
}

